# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solutionFolder: '$(Build.SourcesDirectory)/NavfertyExcelAddIn'
  solution: '$(Build.SourcesDirectory)/NavfertyExcelAddIn.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: PowerShell@2
  name: 'ImportCertificate'
  inputs:
    targetType: 'inline'
    script: |
      Write-Host "Import Certificate"
      $pfxpath = '$(solutionFolder)/$(certfile)'
      Add-Type -AssemblyName System.Security
      $cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
      $cert.Import($pfxpath, '$(password)', [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]"PersistKeySet")
      $store = new-object system.security.cryptography.X509Certificates.X509Store -argumentlist "MY", CurrentUser
      $store.Open([System.Security.Cryptography.X509Certificates.OpenFlags]"ReadWrite")
      $store.Add($cert)
      $store.Close()

- task: VSBuild@1
  inputs:
    solution: '$(solution)'
    vsVersion: 'latest'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: VSTest@2
  inputs:
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'
    # manually collecting coverage in next task
    codeCoverageEnabled: false
    # tests depending on Interop.Excel - run locally
    # https://github.com/microsoft/vstest-docs/blob/master/docs/filter.md
    testFiltercriteria: 'TestCategory!=Automation'

- task: PowerShell@2
  name: 'CollectCodeCoverage'
  inputs:
    targetType: 'inline'
    script: |
      "install tools:"
      &dotnet tool install dotnet-reportgenerator-globaltool --tool-path . --version 4.0.12
      &dotnet tool install coverlet.console --tool-path . --version 1.4.1

      "`nmake reports dir:"
      mkdir .\reports

      "`nrun tests:"
      $unitTestFile = gci -Recurse | ?{ $_.FullName -like "*bin\*Tests.dll" }
      Write-Host "`$unitTestFile value: $unitTestFile"

      $coverlet = "$pwd\coverlet.exe"

      "calling $coverlet for $($unitTestFile.FullName)"
      &$coverlet $unitTestFile.FullName --target "dotnet" --targetargs "vstest $($unitTestFile.FullName) --logger:trx" --format "cobertura"

      "`ngenerate report(s)"
      gci -Recurse | 
          ?{ $_.Name -eq "coverage.cobertura.xml" } | 
          %{ &"$pwd\reportgenerator.exe" "-reports:$($_.FullName)" "-targetdir:reports" "-reporttypes:HTMLInline;HTMLChart" }


- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'Cobertura'
    summaryFileLocation: '$(Build.SourcesDirectory)/coverage.cobertura.xml'
